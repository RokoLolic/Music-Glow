#define _CRT_SECURE_NO_WARNINGS

#pragma once
#include "FFTFunctionsHeader.h"

#define pi 3.14159
using namespace std;


int main()
{

	fftw_complex *in_original, *fourier, *out_original;
	int N = 16;


	in_original = (fftw_complex*)fftw_malloc(sizeof(fftw_complex) * N); //koji ulazi
	fourier = (fftw_complex*)fftw_malloc(sizeof(fftw_complex) * N); //ulaz nakon fourierova transforma
	out_original = (fftw_complex*)fftw_malloc(sizeof(fftw_complex) * N); //fourierov transform nakon inverznog FT, treba biti jenak onom koji ulazi

	for (int i = 0; i < N; i++) {

		*(*(in_original + i) + 0) = 0.5 * sin(((2 * pi) / N) * i * 1 ) + sin(((2 * pi) / N) * i * 3)
			+ sin(((2 * pi) / N) * i * 5) + 10 * sin(((2 * pi) / N) * i * 7); //frekvencije su 1, zatim 3,... usamljeni cijelobrojni faktor
		*(*(in_original + i) + 1) = 0; //nema imaginarnog djela
		//ne može detektirati frekvenciju koja je veća ili jednaka N-1/2. 
	}

	fft(in_original, fourier, N); //original -> fourier
	
	cout << "FFT = " << endl;
	for (int i = 0; i < N; i++) { //ispis nakon fft
		cout << i << ": " << cabs(*(*(fourier + i) + 0) / N, *(*(fourier + i) + 1) / N) << endl;
	}
	cout << "FFT nakon filtra = " << endl;
	filter(fourier, 0, 2, N);
	for (int i = 0; i < N; i++) { //ispis nakon fft
		cout << i << ": " << cabs(*(*(fourier + i) + 0) / N, *(*(fourier + i) + 1) / N) << endl;
	}
	cout << "original nakon filtra = " << endl;
	ifft(fourier, out_original, N); //fourier -> original

	for (int i = 0; i < N; i++) { //ispis nakon fft
		cout << i << ": " << *(*(out_original + i) + 0) / N
			<< " + " << *(*(out_original + i) + 1) / N << endl;
	}

	/*for (int i = 0; i < N; i++) { //ispis nakon fft
		cout << i << ": " << cabs(*(*(out_original + i) + 0) / N, *(*(out_original + i) + 1) / N) << endl;
	}*/

	fftw_free(in_original);
	fftw_free(fourier);
	fftw_free(out_original);
	return 0;
}
